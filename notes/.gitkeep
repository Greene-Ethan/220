print()
input()
eval()
* + - / // **
def my_function():
my_function()
Special characters:
\n = print on next line
\t = prints a uniform tab
end = "yadda yadda" prints things on the same line
name, age = eval(input("hello!\nenter your name and age!"))
print("good to see you",name,"you are",age)
loops = run same bit of code over and over
for loops = "definite" = once it gets to this point it knows how many times it'll loop
for variable_here in sequence:
    <body>
Everything in body loops as many times as you want
sequence = [1, 2, 3]
each time the variable goes through the sequence it equals the value of the sequence
range() = a sequence of numbers of which you can specify which numbers you want.
range(10) = produces numbers 0-1
// = integer division
type() = check the type of a data type
% =modular arithmetic: gives remainders of division ex: 5 % 3 = remainder of 2
abs = finds the absolute value of a variable
math.py = use import.math to load module
use math. to list each math function you can use in a module
range(1, 10) = starts range at 1 ends it at 10
range(3, 10, 2) = (start, stop, step) step = count by number
range(10, 3, -1) = count from ten down to 3
accumulator pattern : accumulates results

CHAPTER 4:
from graphics import Point, Graphwin, Circle
Point(x,y) = set a point on a graph
Graphwin(x,y) = set a window that size
circle(Point(x,y),radius) = draw a circle
.draw = draw it
.move(x,y)
.getCenter
.getX()
.getCenter().getX()
.clone
.getMouse(x,y)
.setCoords(0,0,10,10)
Text(point,message)
.setText(message)

CHAPTER 5:
lists - sequences of objects [] elements ex: ["paul","George", "Jake", "Ryan", 3, 4, 2, 5]
len() - gives length of sequence as integer
.join
.split
ord() = ordinal character to number
chr() = number to character
.format() = allows you to insert variables into strings into {}
format has <>^ align fill and {0:10} width and .2f (2 decimal places
open(<filename>,"r or w" (read or write))
.write(input)
.read()
.readlines()
.readline()

CHAPTER 6:
Scopes - functions only being oriented to their parameters
def <name>(<parameters>):
    <body>




CHAPTER 7:
if <condition>:
    <body>
less than: <
Less than equal: <=
greater than: >
greater than equal: >=
equality: ==
not equal !=

and statements:
bool on left(p) and right and returns a bool(q)
Properties(truth table):
given a p and a q what's the output of p and q
T and F = F
F and T = F
F and F = F
T and T = T
Can have as many as you want



New Datatype: bool, boolean
-primitive datatype
-Can only be (T) or (F)

True or false = values
EX) x = True

try:
except:
catch those errors

CHAPTER 8:
While <condition>:
    <body>


    what_to_write = "{} {} {:.2f}".format(first_name_write, last_name_write, added_nums)